#cloud-config
autoinstall:
  version: 1

  locale: pt_BR.UTF-8
  keyboard:
    layout: br

  timezone: America/Sao_Paulo

  # ===============================================
  # USO TOTAL DO DISCO
  # ===============================================
  storage:
    layout:
      name: lvm  

  # ===============================================
  # LÓGICA PARA NOMEAR MAQUINAS
  # ===============================================

  # Setores: 
  # # IMPLANTAÇÃO = implat 
  # # PRODUÇÃO = prod 
  # # SUPORTE = sup 
  # # COMERCIAL = com 
  # # AMINSTRATIVO / RH = admr 
  # # Desnvolvimento = dev 
  # 
  # Tipos de maquinas: 
  # # Estações de trabalho = workstation 
  # # Servidor = server 
  # # Kiosk (TVs) = kiosk 
  # 
  # Setor + tipo de maquina + número (01 ...) 
  # Obs: Sempre verificar no FreeIPA se existe algum número disponivel antes do ultimo naquele setor. 
  # Essa medida visa manter a organização.

  identity:
    hostname: implant-workstation-01
    username: admings
    password: "$6$kO6Dl0JIi4pLithw$YuWkSmm3m0PSO2fbJ7P6dF7hNV6AuFKgTXbFJoSRnJNvsvokFZG.yLjOOeQZznlz487YvDAN9U2Q3HPy9SE7Y/"

  # ===============================================
  # PACOTES
  # ===============================================
  packages: [] # Movido para late-commands para evitar erros de rede

  # ===============================================
  # APLICAR ARQUIVOS
  # ===============================================
  user-data:
    write_files:
      - path: /etc/polkit-1/rules.d/40-regras-personalizadas.rules
        permissions: '0644'
        owner: root:root
        content: |
          /* Permite que usuários no grupo 'powerusers' desliguem/reiniciem sem senha */
          polkit.addRule(function(action, subject) {
              if ((action.id == "org.freedesktop.login1.power-off" ||
                   action.id == "org.freedesktop.login1.reboot") &&
                  subject.isInGroup("powerusers")) {
                  return polkit.Result.YES;
              }
          });

      - path: /usr/local/bin/setup-user-repo.sh
        permissions: '0755'
        owner: root:root
        content: |
          #!/bin/bash
          LOCK_FILE="$HOME/.config/repo_setup_complete"
          if [ ! -f "$LOCK_FILE" ]; then
              REPO_URL="https://github.com/giusoft/FreeIPA.git"
              DEST_DIR="$HOME/minhas-configs"
              /usr/bin/git clone --branch rustdesk --single-branch "$REPO_URL" "$DEST_DIR"
              if [ $? -eq 0 ]; then
                  mkdir -p "$HOME/.config"
                  touch "$LOCK_FILE"
              fi
          fi

      - path: /etc/skel/.config/autostart/setup-repo.desktop
        permissions: '0644'
        owner: root:root
        content: |
          [Desktop Entry]
          Type=Application
          Name=Setup Inicial do Repositório
          Comment=Clona o repositório de configurações no primeiro login
          Exec=/usr/local/bin/setup-user-repo.sh
          Terminal=false
          Hidden=false

  # ===============================================
  # PÓS-INSTALAÇÃO 
  # ===============================================
  late-commands:
    # 1. Garante conectividade e habilita repositórios completos
    - curtin in-target -- bash -c "ping -c2 archive.ubuntu.com || dhclient || true"
    - curtin in-target -- bash -c "sed -i 's/^# deb/deb/g' /etc/apt/sources.list"
    - curtin in-target -- bash -c 'add-apt-repository -y universe && add-apt-repository -y multiverse && add-apt-repository -y restricted'

    # 2. Atualiza lista de pacotes base e instala ferramentas essenciais
    - curtin in-target -- apt update
    - curtin in-target -- apt install -y wget gpg curl software-properties-common apt-transport-https ca-certificates

    # 3. Configura o repositório do Google Chrome
    - curtin in-target -- bash -c "mkdir -p /etc/apt/keyrings"
    - curtin in-target -- bash -c 'wget -qO- https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | tee /etc/apt/keyrings/google-chrome.gpg > /dev/null'
    - curtin in-target -- bash -c 'echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'

    # 4. Aceita o EULA das fontes Microsoft
    - curtin in-target -- bash -c 'echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | debconf-set-selections'

    # 5. Atualiza o apt novamente para incluir o repo do Chrome
    - curtin in-target -- apt update

    # 6. Instala todos os pacotes de uma vez (sem RustDesk)
    - curtin in-target -- apt install -y \
        google-chrome-stable \
        git \
        vim \
        openssh-server \
        freeipa-client \
        oddjob-mkhomedir \
        ubuntu-restricted-extras \
        ffmpeg \
        gstreamer1.0-plugins-base \
        gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-bad \
        gstreamer1.0-plugins-ugly \
        gstreamer1.0-libav \
        gstreamer1.0-tools \
        gstreamer1.0-x \
        gstreamer1.0-alsa \
        gstreamer1.0-pulseaudio \
        flatpak \
        libreoffice-l10n-pt-br \
        libreoffice-help-pt-br \
        hunspell-pt-br

    # 7. Baixa e instala o RustDesk .deb
    - curtin in-target -- bash -c "wget -q https://github.com/rustdesk/rustdesk/releases/download/1.4.3/rustdesk-1.4.3-x86_64.deb -O /tmp/rustdesk.deb && apt install -y /tmp/rustdesk.deb"

    # 8. Cria o grupo powerusers
    - curtin in-target -- groupadd -f powerusers

    # 9. Habilita SSH
    - curtin in-target -- systemctl enable --now ssh

    # 10. Instala o Tailscale via script oficial
    - curtin in-target -- bash -c "curl -fsSL https://tailscale.com/install.sh | sh"
    
    # 11. Ativa e inicia o serviço Tailscale
    - curtin in-target -- systemctl enable --now tailscaled

